import os

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = {{ debug }}

SECRET_KEY = '{{ django_secret_key }}'

ALLOWED_HOSTS = ['0.0.0.0', '{{ hostname }}', '{{ host_ip }}']

PORTAL_NAME = '{{ portal_name }}'
PROGRAM_NAME_LONG = '{{ program_name_long }}'
PROGRAM_NAME_SHORT = '{{ program_name_short }}'
PRIMARY_CLUSTER_NAME = '{{ primary_cluster_name }}'

CENTER_NAME = PROGRAM_NAME_SHORT + ' HPC Resources'
CENTER_USER_GUIDE = '{{ center_user_guide }}'
CENTER_LOGIN_GUIDE = '{{ center_login_guide }}'
CENTER_HELP_EMAIL = '{{ center_help_email }}'

CENTER_BASE_URL = '{{ full_host_path }}'
CENTER_HELP_URL = CENTER_BASE_URL + '/help'
CENTER_PROJECT_RENEWAL_HELP_URL = CENTER_BASE_URL + '/help'

EMAIL_HOST = '{{ email_host}}'
EMAIL_PORT = {{ email_port }}
EMAIL_SUBJECT_PREFIX = '{{ email_subject_prefix }}'
# A list of admin email addresses to be notified about new requests and other
# events.
EMAIL_ADMIN_LIST = {{ email_admin_list }} or ['admin@{{ hostname }}']
EMAIL_SENDER = '{{ from_email }}'
EMAIL_TICKET_SYSTEM_ADDRESS = 'help@{{ hostname }}'
EMAIL_DIRECTOR_EMAIL_ADDRESS = 'director@{{ hostname }}'
EMAIL_PROJECT_REVIEW_CONTACT = 'review@{{ hostname }}'
EMAIL_DEVELOPMENT_EMAIL_LIST = ['dev1@{{ hostname }}', 'dev2@{{ hostname }}']
EMAIL_OPT_OUT_INSTRUCTION_URL = CENTER_BASE_URL + '/optout'
EMAIL_SIGNATURE = """
{{ portal_name }} User Portal team
{{ full_host_path }}
Email : {{ from_email }}
"""

EMAIL_FROM = '{{ from_email }}'
EMAIL_ADMIN = '{{ admin_email }}'
DEFAULT_FROM_EMAIL = EMAIL_FROM

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '{{ db_name }}',
        'USER': '{{ db_admin_user }}',
        'PASSWORD': '{{ db_admin_passwd }}',
        'HOST': '{{ db_host }}',
        'PORT': '5432',
    },
}

LOG_PATH = '{{ log_path }}/{{ portal_log_file }}'
API_LOG_PATH = '{{ log_path }}/{{ api_log_file }}'
{% if stream_logs_to_stdout is defined and stream_logs_to_stdout | bool %}
STREAM_LOGS_TO_STDOUT = True
{% else %}
STREAM_LOGS_TO_STDOUT = False
{% endif %}

# A list of admin email addresses to CC when certain requests are approved.
REQUEST_APPROVAL_CC_LIST = {{ request_approval_cc_list }}

{% if allow_all_jobs | bool %}
# Allow all jobs, bypassing all checks at job submission time.
ALLOW_ALL_JOBS = True
{% endif %}

# Extra apps to be included.
EXTRA_EXTRA_APPS = []
# Extra middleware to be included.
EXTRA_EXTRA_MIDDLEWARE = []

#------------------------------------------------------------------------------
# File Storage Settings
#------------------------------------------------------------------------------

{% if django_media_root is defined and django_media_root %}
# An absolute path to the local filesystem directory holding user-uploaded
# files.
MEDIA_ROOT = '{{ django_media_root }}'
{% endif %}

# A dict denoting where and how user-uploaded files (currently only MOUs) should
# be stored.
FILE_STORAGE = {
    'backend': '{{ file_storage_backend }}',
    'details': {
        'NEW_PROJECT_REQUEST_MOU': {
            'location': '{{ new_project_request_mou_path }}',
            'filename_type': 'NewProject_MOU',
        },
        'SERVICE_UNITS_PURCHASE_REQUEST_MOU': {
            'location': '{{ service_units_purchase_request_mou_path }}',
            'filename_type': 'AllowancePurchase_MOU',
        },
        'SECURE_DIRECTORY_REQUEST_MOU': {
            'location': '{{ secure_directory_request_mou_path }}',
            'filename_type': 'SecureDirectory_RUA',
        },
    },
}

#------------------------------------------------------------------------------
# Billing settings
#------------------------------------------------------------------------------

{% if (flag_lrc_enabled | bool) and (install_billing_validation_package | bool) and oracle_billing_db_dsn|length %}
# The class to use for validating billing IDs.
BILLING_VALIDATOR_BACKEND = 'coldfront.core.billing.utils.validation.backends.oracle.OracleValidatorBackend'

# Credentials for the Oracle billing database.
ORACLE_BILLING_DB = {
    'dsn': '{{ oracle_billing_db_dsn }}',
    'user': '{{ oracle_billing_db_user }}',
    'password': '{{ oracle_billing_db_passwd }}',
}
{% endif %}

#------------------------------------------------------------------------------
# Renewal Survey Validation settings
#------------------------------------------------------------------------------

# The class to use for validating whether renewal survey has been completed.
RENEWAL_SURVEY_VALIDATOR_BACKEND = 'coldfront.core.project.utils_.validation.backends.production_backend.ProductionValidatorBackend'

#------------------------------------------------------------------------------
# SSL settings
#------------------------------------------------------------------------------

# Use a secure cookie for the session cookie (HTTPS only).
{% if ssl_enabled | bool %}
SESSION_COOKIE_SECURE = True
{% else %}
SESSION_COOKIE_SECURE = False
{% endif %}

#------------------------------------------------------------------------------
# Sentry settings
#------------------------------------------------------------------------------

# Configure Sentry.
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import ignore_logger


{% if sentry_dsn|length > 0 %}
SENTRY_DSN = '{{ sentry_dsn.strip() }}'
{% else %}
SENTRY_DSN = ''
{% endif %}
if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[DjangoIntegration()],
        sample_rate=0.1,
        traces_sample_rate=0.001,
        send_default_pii=True)
    # Ignore noisy loggers.
    ignore_logger('coldfront.api')
    ignore_logger('coldfront.core.utils.middleware')

#------------------------------------------------------------------------------
# Django All-Auth settings
#------------------------------------------------------------------------------

CILOGON_APP_CLIENT_ID = '{{ cilogon_app_client_id }}'
CILOGON_APP_SECRET = '{{ cilogon_app_secret }}'

#------------------------------------------------------------------------------
# django-constance settings
#------------------------------------------------------------------------------

from datetime import date


CONSTANCE_CONFIG = {
    'FEEDBACK_FORM_URL': ('', 'The URL to the feedback form.'),
    'DOCS_GETTING_HELP_URL': (
        '', 'The URL to the documentation page on getting help.'),
    'LAUNCH_DATE': (date(1970, 1, 1), 'The date the portal was launched.'),
}
CONSTANCE_REDIS_CONNECTION = {
    'host': '{{ redis_host }}',
    'port': 6379,
    'db': 0,
    'password': '{{ redis_passwd }}',
}

{% if enable_django_debug_toolbar %}
#------------------------------------------------------------------------------
# django-debug-toolbar settings
#------------------------------------------------------------------------------

EXTRA_EXTRA_APPS += [
    'debug_toolbar'
]

EXTRA_EXTRA_MIDDLEWARE += [
    'debug_toolbar.middleware.DebugToolbarMiddleware'
]

# IP addresses that can view the django debug toolbar.
INTERNAL_IPS = [
    '127.0.0.1',
{% for ip in debug_toolbar_ips %}
    '{{ ip }}',
{% endfor %}
]

if DEBUG:
    # For Docker support
    import socket
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[: ip.rfind('.')] + '.1' for ip in ips] + ['10.0.2.2']

DISABLE_PANELS = {
    'debug_toolbar.panels.history.HistoryPanel',
    'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    'debug_toolbar.panels.settings.SettingsPanel',
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.cache.CachePanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    'debug_toolbar.panels.redirects.RedirectsPanel',
    'debug_toolbar.panels.profiling.ProfilingPanel',
}
{% endif %}

#------------------------------------------------------------------------------
# django-flags settings
#------------------------------------------------------------------------------

FLAGS = {
    'ALLOCATION_RENEWAL_FOR_NEXT_PERIOD_REQUESTABLE': [
        {'condition': 'during month', 'value': '{{ flag_next_period_renewal_requestable_month }}'},
    ],
    'BASIC_AUTH_ENABLED': [{'condition': 'boolean', 'value': {{ flag_basic_auth_enabled }}}],
    'BRC_ONLY': [{'condition': 'boolean', 'value': {{ flag_brc_enabled }}}],
    'LINK_LOGIN_ENABLED': [{'condition': 'boolean', 'value': {{ flag_link_login_enabled }}}],
    'LRC_ONLY': [{'condition': 'boolean', 'value': {{ flag_lrc_enabled }}}],
    'MULTIPLE_EMAIL_ADDRESSES_ALLOWED': [{'condition': 'boolean', 'value': {{ flag_multiple_email_addresses_allowed }}}],
    'SECURE_DIRS_REQUESTABLE': [{'condition': 'boolean', 'value': {{ flag_brc_enabled }}}],
    'SERVICE_UNITS_PURCHASABLE': [{'condition': 'boolean', 'value': {{ flag_brc_enabled }}}],
    'SSO_ENABLED': [{'condition': 'boolean', 'value': {{ flag_sso_enabled }}}],
    'MOU_GENERATION_ENABLED': [{'condition': 'boolean', 'value': {{ flag_mou_generation_enabled }}}],
}

# Enforce that boolean flags are consistent with each other.
from django.core.exceptions import ImproperlyConfigured
if not (FLAGS['BRC_ONLY'][0]['value'] ^ FLAGS['LRC_ONLY'][0]['value']):
    raise ImproperlyConfigured(
        'Exactly one of BRC_ONLY, LRC_ONLY should be enabled.')
if not (
        FLAGS['BASIC_AUTH_ENABLED'][0]['value'] ^
        FLAGS['SSO_ENABLED'][0]['value']):
    raise ImproperlyConfigured(
        'Exactly one of BASIC_AUTH_ENABLED, SSO_ENABLED should be enabled.')
if (not FLAGS['SSO_ENABLED'][0]['value'] and
        FLAGS['LINK_LOGIN_ENABLED'][0]['value']):
    raise ImproperlyConfigured(
        'LINK_LOGIN_ENABLED should only be enabled when SSO_ENABLED is '
        'enabled.')

{% if file_storage_backend == 'google_drive' %}
#------------------------------------------------------------------------------
# django-googledrive-storage settings
#------------------------------------------------------------------------------

# Note: This section appears because FILE_STORAGE['backend'] == 'google_drive'.

EXTRA_EXTRA_APPS += [
    'gdstorage',
]

# An absolute path to a private JSON key file for a Google service account.
GOOGLE_DRIVE_STORAGE_JSON_KEY_FILE = '{{ google_drive_private_key_file_path }}'

# The base path files will be uploaded to in Google Drive. (E.g., if the root is
# '/a/b/', and the specified upload path is 'c/file.txt', the file will be
# uploaded to '/a/b/c/file.txt'. The base path is ignored if the specified
# upload path is absolute.
GOOGLE_DRIVE_STORAGE_MEDIA_ROOT = '{{ google_drive_storage_media_root }}'
{% endif %}

#------------------------------------------------------------------------------
# django-q settings
#------------------------------------------------------------------------------

Q_CLUSTER = {
    'redis': {
        'host': '{{ redis_host }}',
        'port': 6379,
        'db': 0,
        'password': '{{ redis_passwd }}',
    }
}
